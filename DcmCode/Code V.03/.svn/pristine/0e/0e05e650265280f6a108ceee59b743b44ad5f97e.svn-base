using Dcm.Models;
using Dcm.Source;
using Gunluk.EntityModels;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Dcm.EntityModels;
using BaseDB;
using Dcm.Filters;
using System.Web.Script.Serialization;
using BaseClasses;

namespace Dcm.Controllers
{
    public class UsersController : Controller
    {

        #region Kullanıcı İşlemleri
        [HttpGet]
        [AllowAnonymous]
        [SessionCheckAttribute]
        public ActionResult User(string RecordId,string MenuId )
        {
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();
            User model = new User();

            #region Ortak Set Edilecek Değerler  
            model.RecordId = RecordId;
            model.MenuId = MenuId;
            SessionContext.Current.ActiveUser.MenuId = MenuId;
            #endregion

            Guid recordId = Guid.Empty;

            if (GlobalHelper.IsGuid(model.RecordId))
            {
                try
                {
                    recordId = Guid.Parse(model.RecordId);
                    model = gnlDB.BindUser(model, recordId);
                    ViewBag.ResultMessage = Resources.GlobalResource.transaction_success;
                }
                catch (Exception exp)
                {
                    ViewBag.Success = false;
                    ModelState.AddModelError("Error", exp.Message);
                }
            }

            return View(model);
        }

        [HttpPost]
        [SessionCheckAttribute]
        public ActionResult User(User model)
        {
            Guid recordId = Guid.Empty;
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();

            #region Ortak Set Edilecek Değerler
            SessionContext.Current.ActiveUser.MenuId = model.MenuId;
            ViewBag.Success = true;
            #endregion

            ModelState.Remove("start_date");
            ModelState.Remove("end_date");
            ModelState.Remove("is_active");

            if (ModelState.IsValid)
            {
                if (GlobalHelper.IsGuid(model.RecordId))
                {
                    recordId = Guid.Parse(model.RecordId);
                    try
                    {
                        if (!string.IsNullOrEmpty(model.password))
                            model.password = GlobalHelper.EncriptText(model.password.Trim());

                        gnl_users userByEmail = new gnl_users();
                        userByEmail = gnlDB.GetUserByEmail(model.email.Trim());

                        if (userByEmail != null && userByEmail.user_id != recordId)
                        {
                            ViewBag.Success = false;
                            ModelState.AddModelError("Error", Resources.GlobalResource.exists_user_email);
                        }
                        else
                        {
                            model = gnlDB.UpdateUser(model, recordId);

                            if(!string.IsNullOrEmpty(model.password))
                                ViewBag.ResultMessage = Resources.GlobalResource.transaction_success_with_password;
                            else
                                ViewBag.ResultMessage = Resources.GlobalResource.transaction_success;
                        }
                    }
                    catch (Exception exp)
                    {
                        ViewBag.Success = false;
                        ModelState.AddModelError("Error", exp.Message);
                    }
                }
                else
                {
                    try
                    {
                        gnl_users user = new gnl_users();

                        if (!string.IsNullOrEmpty(model.password))
                            model.password = GlobalHelper.EncriptText(model.password.Trim());

                        gnl_users userByEmail = new gnl_users();
                        userByEmail = gnlDB.GetUserByEmail(model.email.Trim());

                        if (userByEmail != null)
                        {
                            ViewBag.Success = false;
                            ModelState.AddModelError("Error", Resources.GlobalResource.exists_user_email);
                        }
                        else
                        {
                            gnlDB.AddUser(user, model);
                            model.RecordId = user.user_id.ToString();

                            if (!string.IsNullOrEmpty(model.password))
                                ViewBag.ResultMessage = Resources.GlobalResource.transaction_success_with_password;
                            else
                                ViewBag.ResultMessage = Resources.GlobalResource.transaction_success;
                        }
                    }
                    catch (Exception exp)
                    {
                        ViewBag.Success = false;
                        ModelState.AddModelError("Error", exp.Message);
                    }
                }
            }
            else
            {
                ViewBag.Success = false;
            }
            
            return View(model);
        }

        public JsonResult UserList(string type, string query)
        {
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();
            string list = string.Empty;
            List<UserListModel> userListModel = new List<UserListModel>();

            if (type == "ALL")
            {
                List<gnl_users> userList = gnlDB.GetUserByNameSurname(query.ToUpperInvariant());
               
                foreach (var item in userList)
                {
                    UserListModel model = new UserListModel();
                    model.value = item.name + " " + item.surname;
                    UserListCategoryModel data = new UserListCategoryModel();
                    data.category = "";
                    data.id = item.user_id.ToString();
                    model.data = data;
                    userListModel.Add(model);
                }
            }

            JavaScriptSerializer js = new JavaScriptSerializer();
            string userListModelStr = js.Serialize(userListModel);
            string resultArray = "{\"suggestions\":" + userListModelStr + " }";

            list = js.Serialize(resultArray);

            return Json(list, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Rol İşlemleri
        [HttpGet]
        [AllowAnonymous]
        [SessionCheckAttribute]
        public ActionResult Role(string RecordId, string MenuId)
        {
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();
            Role model = new Role();

            #region Ortak Set Edilecek Değerler
            model.RecordId = RecordId;
            model.MenuId = MenuId;
            SessionContext.Current.ActiveUser.MenuId = MenuId;
            #endregion

            Guid recordId = Guid.Empty;

            if (GlobalHelper.IsGuid(model.RecordId))
            {
                try
                {
                    recordId = Guid.Parse(model.RecordId);
                    model = gnlDB.BindRole(model, recordId);
                    ViewBag.ResultMessage = Resources.GlobalResource.transaction_success;
                }
                catch (Exception exp)
                {
                    ViewBag.Success = false;
                    ModelState.AddModelError("Error", exp.Message);
                }
            }

            Guid role_uid = Guid.Empty;
            if (Guid.TryParse(model.RecordId, out role_uid))
            {
                List<gnl_role_related_users_v> listRoleRelatedUsers = gnlDB.GetRoleRelatedUsers(role_uid);
                model.roleRelatedUsers = listRoleRelatedUsers;
            }

            return View(model);
        }

        [HttpPost]
        [SessionCheckAttribute]
        public ActionResult Role(Role model)
        {
            Guid recordId = Guid.Empty;
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();

            #region Ortak Set Edilecek Değerler
            SessionContext.Current.ActiveUser.MenuId = model.MenuId;
            ViewBag.Success = true;
            #endregion

            ModelState.Remove("is_active");

            if (ModelState.IsValid)
            {
                if (GlobalHelper.IsGuid(model.RecordId))
                {
                    recordId = Guid.Parse(model.RecordId);
                    try
                    {
                       model = gnlDB.UpdateRole(model, recordId);
                       ViewBag.ResultMessage = Resources.GlobalResource.transaction_success;
                    }
                    catch (Exception exp)
                    {
                        ViewBag.Success = false;
                        ModelState.AddModelError("Error", exp.Message);
                    }
                }
                else
                {
                    try
                    {
                        gnl_roles role = new gnl_roles();
                        gnlDB.AddRole(role, model);
                        model.RecordId = role.role_id.ToString();
                        ViewBag.ResultMessage = Resources.GlobalResource.transaction_success;
                    }
                    catch (Exception exp)
                    {
                        ViewBag.Success = false;
                        ModelState.AddModelError("Error", exp.Message);
                    }
                }
            }
            else
            {
                ViewBag.Success = false;
            }

            Guid role_uid = Guid.Empty;
            if (Guid.TryParse(model.RecordId, out role_uid) )
            {
                List<gnl_role_related_users_v> listRoleRelatedUsers = gnlDB.GetRoleRelatedUsers(role_uid);
                model.roleRelatedUsers = listRoleRelatedUsers;
            }
            return View(model);
        }


        [SessionCheckAttribute]
        public PartialViewResult RoleRelatedUsers(string role_id,string user_id,string input)
        {
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();
            gnl_roles_related_users role_related_users = new gnl_roles_related_users();

            Role model=new  Role();
            Guid role_uid =Guid.Empty;
            Guid user_uid =Guid.Empty;

            if (Guid.TryParse(role_id, out role_uid) && Guid.TryParse(user_id, out user_uid))
            {
                if (role_uid != Guid.Empty && user_uid != Guid.Empty)
                {
                    List<gnl_role_related_users_v> list = gnlDB.GetRoleRelatedUsers(role_uid);

                    if (list.Where(x => x.user_id == user_uid).Count() <= 0)
                    {
                        model.role_id = role_uid;
                        model.user_id = user_uid;
                        gnlDB.AddRoleRelatedUsers(role_related_users, model);
                    }
                    else
                    {
                        if (input != "")
                            model.errorMessage = Resources.GlobalResource.role_related_users_defined;
                    }
                }
                else
                {
                    if (input != "")
                        model.errorMessage = Resources.GlobalResource.role_related_role_not_defined;
                }
            }

            List<gnl_role_related_users_v> listRoleRelatedUsers = gnlDB.GetRoleRelatedUsers(role_uid);

            model.roleRelatedUsers = listRoleRelatedUsers;

            return PartialView("RoleRelatedUsers",model);
        }

        [SessionCheckAttribute]
        public PartialViewResult RoleRelatedUsersDelete(string role_id, string id)
        {
            GenelRepository gnlDB = RepositoryManager.GetRepository<GenelRepository>();
            gnl_roles_related_users role_related_users = new gnl_roles_related_users();

            Role model = new Role();
            Guid role_uid = Guid.Empty;
            Guid user_uid = Guid.Empty;

            if (Guid.TryParse(role_id, out role_uid) && BaseFunctions.getInstance().IsNumeric(id))
            {
                var obj = gnlDB.GetRoleRelatedUsersById(Convert.ToInt32(id));
                if (obj!=null && obj.Count>0)
                    gnlDB.DeleteRoleRelatedUsers(obj[0]);
            }

            List<gnl_role_related_users_v> listRoleRelatedUsers = gnlDB.GetRoleRelatedUsers(role_uid);

            model.roleRelatedUsers = listRoleRelatedUsers;

            return PartialView("RoleRelatedUsers", model);
        }
        #endregion

    }
}